// This file is automatically generated. DO NOT EDIT.

package testkeys_test

import (
	"crypto/x509"
	"encoding/pem"
	"testing"

	"github.com/tprasadtp/cryptokms/internal/testkeys"
)

{{ range $index, $bits :=  .RSA }}
func Test_RSA_{{$bits}}(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetRSA{{$bits}}PrivateKey().PublicKey.Equal(testkeys.GetRSA{{$bits}}PublicKey()) {
		t.Error("key mismatch GetRSA{{$bits}}PrivateKey != GetRSA{{$bits}}PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetRSA{{$bits}}PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetRSA{{$bits}}PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetRSA{{$bits}}PrivateKey != parse(GetRSA{{$bits}}PublicKeyPEM)")
	}
}
{{ end }}


{{ range $index, $bits :=  .EC }}
func Test_EC_P{{$bits}}(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetECP{{$bits}}PrivateKey().PublicKey.Equal(testkeys.GetECP{{$bits}}PublicKey()) {
		t.Error("key mismatch GetECP{{$bits}}PrivateKey != GetECP{{$bits}}PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetECP{{$bits}}PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetECP{{$bits}}PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetECP{{$bits}}PrivateKey != parse(GetECP{{$bits}}PublicKeyPEM)")
	}
}
{{ end }}


func Test_ED25519(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetED25519PublicKey().Equal(testkeys.GetED25519PrivateKey().Public()) {
		t.Error("key mismatch GetED25519PublicKey != GetED25519PrivateKey.Public()")
	}

	// Ensure PEM and Public keys match.
	block, _ := pem.Decode(testkeys.GetED25519PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetED25519PublicKey().Equal(pub) {
		t.Error("key mismatch GetED25519PublicKey != parse(GetED25519PublicKeyPEM)")
	}
}
