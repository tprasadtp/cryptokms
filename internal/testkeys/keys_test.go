// This file is automatically generated. DO NOT EDIT.

package testkeys_test

import (
	"crypto/x509"
	"encoding/pem"
	"testing"

	"github.com/tprasadtp/cryptokms/internal/testkeys"
)

func Test_RSA_2048(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetRSA2048PrivateKey().PublicKey.Equal(testkeys.GetRSA2048PublicKey()) {
		t.Error("key mismatch GetRSA2048PrivateKey != GetRSA2048PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetRSA2048PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetRSA2048PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetRSA2048PrivateKey != parse(GetRSA2048PublicKeyPEM)")
	}
}

func Test_RSA_3072(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetRSA3072PrivateKey().PublicKey.Equal(testkeys.GetRSA3072PublicKey()) {
		t.Error("key mismatch GetRSA3072PrivateKey != GetRSA3072PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetRSA3072PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetRSA3072PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetRSA3072PrivateKey != parse(GetRSA3072PublicKeyPEM)")
	}
}

func Test_RSA_4096(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetRSA4096PrivateKey().PublicKey.Equal(testkeys.GetRSA4096PublicKey()) {
		t.Error("key mismatch GetRSA4096PrivateKey != GetRSA4096PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetRSA4096PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetRSA4096PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetRSA4096PrivateKey != parse(GetRSA4096PublicKeyPEM)")
	}
}

func Test_EC_P256(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetECP256PrivateKey().PublicKey.Equal(testkeys.GetECP256PublicKey()) {
		t.Error("key mismatch GetECP256PrivateKey != GetECP256PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetECP256PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetECP256PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetECP256PrivateKey != parse(GetECP256PublicKeyPEM)")
	}
}

func Test_EC_P384(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetECP384PrivateKey().PublicKey.Equal(testkeys.GetECP384PublicKey()) {
		t.Error("key mismatch GetECP384PrivateKey != GetECP384PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetECP384PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetECP384PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetECP384PrivateKey != parse(GetECP384PublicKeyPEM)")
	}
}

func Test_EC_P521(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetECP521PrivateKey().PublicKey.Equal(testkeys.GetECP521PublicKey()) {
		t.Error("key mismatch GetECP521PrivateKey != GetECP521PublicKey")
	}

	// Ensure PEM and Private keys match.
	block, _ := pem.Decode(testkeys.GetECP521PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetECP521PrivateKey().PublicKey.Equal(pub) {
		t.Error("key mismatch GetECP521PrivateKey != parse(GetECP521PublicKeyPEM)")
	}
}

func Test_ED25519(t *testing.T) {
	// Ensure private key corresponds to public key
	if !testkeys.GetED25519PublicKey().Equal(testkeys.GetED25519PrivateKey().Public()) {
		t.Error("key mismatch GetED25519PublicKey != GetED25519PrivateKey.Public()")
	}

	// Ensure PEM and Public keys match.
	block, _ := pem.Decode(testkeys.GetED25519PublicKeyPEM())
	pub, err := x509.ParsePKIXPublicKey(block.Bytes)
	if err != nil {
		t.Fatalf("Failed to parse public key: %s", err)
	}
	if !testkeys.GetED25519PublicKey().Equal(pub) {
		t.Error("key mismatch GetED25519PublicKey != parse(GetED25519PublicKeyPEM)")
	}
}
